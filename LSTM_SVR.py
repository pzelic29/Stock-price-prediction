# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yR3nGyJPi9Ds6ywM3YP9A9wnOSK70wuY
"""

##Artificial recurrent neural network Long Short term memory (lsmt)
## Za predviđanje cijena dionica kompanije (Apple Inc.)

##Učitavanje potrebnih biblioteka
import math
import pandas_datareader as web ##podaci
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt ##crtanje grafova
plt.style.use('fivethirtyeight')


from sklearn.linear_model import LinearRegression ##linerana regresija
from sklearn.svm import SVR ##support vector machine
from sklearn.model_selection import train_test_split ##za razdvajanje i uvježbavanje podata te njihovo testiranje

#Učitavanje podataka
df = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2019-12-31')
df

#Broj redaka i stupaca u podacima
df.shape

##Vizualizacija cijena dionica na dan zatvaranja
plt.figure(figsize=(16,8))
plt.title('Cijena dionica')
plt.plot(df['Close'])
plt.xlabel('Datum',fontsize=18)
plt.ylabel('Cijena USD ($) ',fontsize=18)
plt.show()

##Kreiranje novih podataka koji sadrže samo "Close" stupcem
data=df.filter(['Close'])
#Pretvaranje u numpy array
dataset=data.values
#Broj redaksa na kojima ćemo testirati model
training_data_len=math.ceil(len(dataset)*.8)
training_data_len

#Skaliraje podataka
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(dataset)

scaled_data

#Kreiranje podataka za uvježbavanje
train_data=scaled_data[0:training_data_len,:]
##podijela podataka na x_train and y_train podatke
x_train=[]
y_train=[]

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=60:
    print(x_train)
    print(y_train)
    print()

##Prebacivanje x_train i y_train u nupmy array
x_train,y_train=np.array(x_train),np.array(y_train)

##reshape the data
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Kreiranje LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='Adam', loss='mean_squared_error')

##Uvježbavanje modela
model.fit(x_train,y_train,batch_size=1,epochs=1)

##Kreiranje podataka za uvježbavannje
##Create a new array containing scaled values form index 1543 to 2003
test_data=scaled_data[training_data_len-60:,:]
##Kreiranje data sets x_test,y_test
x_test=[]
y_test=dataset[training_data_len: ,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#Pretvaranje podataka u a numpy array
x_test=np.array(x_test)

#Shape the data
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

##Predviđena cijena x_test dataset
predictions=model.predict(x_test)
predictions=scaler.inverse_transform(predictions)

##Root mean squared error (RMSE)
##rmse = np.sqrt(((predictions - y_test) ** 2).mean())
rmse = np.sqrt(((predictions - y_test) ** 2).mean())
rmse

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Vizualizacija podataka
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Datum', fontsize=18)
plt.ylabel('Cijena USD ($)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Uvježbavanje', 'Stvarno stanje', 'Predviđenje'], loc='lower right')
plt.show()

#Prikaz stvarnih cijena i predviđenih cijena
valid

#Get the quote
apple_quote=web.DataReader('AAPL',data_source='yahoo',start='2012-01-01',end='2019-12-31')
##Create a newq dataframe
new_df=apple_quote.filter(['Close'])
##Get the last 60 day closing price values and convert the dataframe to an array
last_60_days=new_df[-60:].values
#Scale the data to be values between 0 and 1
last_60_days_scaled=scaler.transform(last_60_days)
##Create an empety list
X_test=[]
##Append the last 60 days 
X_test.append(last_60_days_scaled)
#Convert the X_test data set to a numpy array
X_test=np.array(X_test)
##Reshape the data
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#Get the predicted scaled price
pred_price=model.predict(X_test)
##undo the scaling
pred_price=scaler.inverse_transform(pred_price)
print(pred_price)

##Get the quote 
apple_quote2=web.DataReader('AAPL',data_source='yahoo',start='2019-12-31',end='2019-12-31')
print(apple_quote2['Close'])

##Ovo je bio dio programa koji je pokazao predviđene cijene koristeći LSTM,a sad ćemo pokazati kako istu stvar rade SVM i Linearna regresija

#Učitavanje podataka
from google.colab import files # učitavanje podataka na Google Colab
uploaded = files.upload() 
df = pd.read_excel('AAPL_stock_history2.xlsx')
df

#Kreiranje lista / x i y podataka zavisna i nezavisna varijabla
dates=[]
prices=[]

#Broj redaka i stupaca
df.shape

#Zadnji redak u podatcima(za njega ćemo napraviti predviđanje)
df.tail(1)

#Data set bez zadnjeg retka
df=df.head(len(df)-1)
df

#The new shape of the data
df.shape

#Svi redci from the Date stupca
df_dates = df.loc[:, 'Date']
#Svi redci iz  Open stupca
df_open = df.loc[:, 'Open']

#Kreiranje nezavisnog seta podataka X
for date in df_dates:
  dates.append([int(date.split('-')[2])])
  
#Kreiranje zavisnog seta podataka 'y'
for open_price in df_open:
  prices.append(float(open_price))

##Dani koji su spremljeni u listu
print(dates)

def predict_prices(dates, prices, x):
  
  #Kreiranje 3 Support Vector Regression modela
  svr_lin = SVR(kernel='linear', C= 1e3)
  svr_poly= SVR(kernel='poly', C=1e3, degree=2)
  svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
  
  #Uvježbavanje SVR modela 
  svr_lin.fit(dates,prices)
  svr_poly.fit(dates,prices)
  svr_rbf.fit(dates,prices)
  
  #Kreiranje Linear Regression modela
  lin_reg = LinearRegression()
  #uvježbavanje Linear Regression modela
  lin_reg.fit(dates,prices)
  
  #Plot the models on a graph to see which has the best fit
  plt.scatter(dates, prices, color='black', label='Data')
  plt.plot(dates, svr_rbf.predict(dates), color='red', label='SVR RBF')
  plt.plot(dates, svr_poly.predict(dates), color='blue', label='SVR Poly')
  plt.plot(dates, svr_lin.predict(dates), color='green', label='SVR Linear')
  plt.plot(dates, lin_reg.predict(dates), color='orange', label='Linear Reg')
  plt.xlabel('Dani')
  plt.ylabel('Cijene')
  plt.title('Regression')
  plt.legend()
  plt.show()

  return svr_rbf.predict(x)[0], svr_lin.predict(x)[0],svr_poly.predict(x)[0],lin_reg.predict(x)[0]

#Predviđanje cijene na datum 31-12.2019.
predicted_price=predict_prices(dates,prices,[[30]])
print(predicted_price)